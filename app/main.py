import io
from PIL import Image, ImageDraw
import streamlit as st

st.set_page_config(page_title="MedScreen", page_icon="ü©∫", layout="wide")

# --- –£—Ç–∏–ª–∏—Ç—ã ---
PREVIEW_W, PREVIEW_H = 448, 448

def letterbox(img: Image.Image, w=PREVIEW_W, h=PREVIEW_H, fill=(20, 20, 20)):
    """–í–ø–∏—Å—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ä–∞–º–∫—É —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π."""
    iw, ih = img.size
    s = min(w / iw, h / ih)
    nw, nh = int(iw * s), int(ih * s)
    resized_img = img.resize((nw, nh), Image.LANCZOS)
    canvas = Image.new("RGB", (w, h), fill)
    canvas.paste(resized_img, ((w - nw) // 2, (h - nh) // 2))
    return canvas

def mock_detect(img: Image.Image):
    """–ó–∞–≥–ª—É—à–∫–∞: —Ä–∏—Å—É–µ—Ç —Ä–∞–º–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏."""
    out = letterbox(img).copy()
    d = ImageDraw.Draw(out)
    w, h = out.size
    box = (int(w * 0.2), int(h * 0.2), int(w * 0.8), int(h * 0.8))
    d.rectangle(box, outline=(255, 64, 64), width=6)
    return out, "–ü–∞—Ç–æ–ª–æ–≥–∏—è", 0.73

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
if "files" not in st.session_state:
    st.session_state.files = []
    st.session_state.idx = 0
    st.session_state.result_img = None
    st.session_state.result_label = None
    st.session_state.result_score = None

# --- –§—É–Ω–∫—Ü–∏–∏-–∫–æ–ª–±—ç–∫–∏ ---
def clear_results():
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞."""
    st.session_state.result_img = None
    st.session_state.result_label = None
    st.session_state.result_score = None

def handle_upload():
    st.session_state.files = st.session_state.uploader
    st.session_state.idx = 0
    clear_results()

def clear_all():
    st.session_state.files = []
    st.session_state.idx = 0
    clear_results()

def prev_image():
    st.session_state.idx -= 1
    clear_results()

def next_image():
    st.session_state.idx += 1
    clear_results()

def analyze_image():
    img_bytes = st.session_state.files[st.session_state.idx].getvalue()
    img = Image.open(io.BytesIO(img_bytes)).convert("RGB")
    det_img, label, score = mock_detect(img)
    st.session_state.result_img = det_img
    st.session_state.result_label = label
    st.session_state.result_score = score

# --- –õ–æ–≥–∏–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü ---
def show_check_page():
    """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É '–ü—Ä–æ–≤–µ—Ä–∫–∞'."""
    has_files = len(st.session_state.files) > 0
    col1, col2 = st.columns(2, gap="large")

    with col1:
        subheader_text = "–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä"
        if has_files:
            subheader_text += f" ({st.session_state.idx + 1} / {len(st.session_state.files)})"
        st.subheader(subheader_text)

        with st.container(border=True):
            if has_files:
                current_file = st.session_state.files[st.session_state.idx]
                img = Image.open(current_file).convert("RGB")
                st.image(letterbox(img), caption=current_file.name)
            else:
                st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–Ω–µ–ª–∏ —Å–ª–µ–≤–∞.")
        
        if has_files:
            btn_cols = st.columns([1, 1, 3])
            btn_cols[0].button("‚óÄ –ü—Ä–µ–¥.", on_click=prev_image, disabled=(st.session_state.idx == 0), use_container_width=True)
            btn_cols[1].button("–°–ª–µ–¥. ‚ñ∂", on_click=next_image, disabled=(st.session_state.idx >= len(st.session_state.files) - 1), use_container_width=True)
            btn_cols[2].button("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", type="primary", on_click=analyze_image, use_container_width=True)

    with col2:
        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞")
        with st.container(border=True):
            if st.session_state.result_img:
                cap = f"{st.session_state.result_label} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {st.session_state.result_score:.2f})"
                st.image(st.session_state.result_img, caption=cap)
            else:
                st.info("–ó–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ ¬´–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å¬ª.")

def show_about_page():
    """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É '–û –ø—Ä–æ–µ–∫—Ç–µ'."""
    st.subheader("–û –ø—Ä–æ–µ–∫—Ç–µ MedScreen")
    st.markdown("""
        **MedScreen** ‚Äî —ç—Ç–æ –ø—Ä–æ—Ç–æ—Ç–∏–ø –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
        - **–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è** —Ä–µ–∞–ª–∏–∑—É–µ—Ç UI, –ø–∞–∫–µ—Ç–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä.
        - **–î–µ—Ç–µ–∫—Ü–∏—è** —è–≤–ª—è–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–æ–π –∏ –∏–º–∏—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã –º–æ–¥–µ–ª–∏.
    """)
    st.warning("> ‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –ü—Ä–æ—Ç–æ—Ç–∏–ø –Ω–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∫–ª–∏–Ω–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è.")

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
with st.sidebar:
    st.title("ü©∫ MedScreen")
    page = st.radio("–ú–µ–Ω—é", ["–ü—Ä–æ–≤–µ—Ä–∫–∞", "–û –ø—Ä–æ–µ–∫—Ç–µ"], label_visibility="collapsed")
    st.divider()

    if page == "–ü—Ä–æ–≤–µ—Ä–∫–∞":
        st.file_uploader(
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ PNG/JPG",
            type=["png", "jpg", "jpeg"],
            accept_multiple_files=True,
            key="uploader",
            on_change=handle_upload
        )
        st.button("–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë", on_click=clear_all, disabled=not st.session_state.files)

if page == "–ü—Ä–æ–≤–µ—Ä–∫–∞":
    show_check_page()
elif page == "–û –ø—Ä–æ–µ–∫—Ç–µ":
    show_about_page()