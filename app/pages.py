import streamlit as st
import pandas as pd
import time
from file_io import parse_zip_archive
from data_validation import validate_series
from visualization import prepare_frames_for_display, create_gif
from ml_processing import get_model, run_pathology_inference

# –û–∫–Ω–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ö–¢ (Center, Width)
CT_WINDOWS = {
    "–õ–µ–≥–æ—á–Ω–æ–µ (Lung)": (-600, 1500),
    "–ú—è–≥–∫–æ—Ç–∫–∞–Ω–Ω–æ–µ (Soft Tissue)": (40, 400),
    "–ö–æ—Å—Ç–Ω–æ–µ (Bone)": (700, 1500),
}

def reset_session_state():
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞."""
    st.session_state.clear()


def show_about_page():
    st.title("‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")
    st.markdown("""
        **MedScreen** ‚Äî —ç—Ç–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–º–µ–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç—ã:
        
        - **–ü—Ä–µ–≤—å—é –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:** –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è. –ü–æ–∑–≤–æ–ª—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ –∏–∑—É—á–∏—Ç—å —Å—Ä–µ–∑—ã, –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ML-–º–æ–¥–µ–ª–∏.
        - **–ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞:** –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞—Ä—Ö–∏–≤–æ–≤ —Å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º–∏ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–≥–æ CSV-–æ—Ç—á–µ—Ç–∞.
        - **API-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:** –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ç–æ–≥–æ, –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å –≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞–π–ø–ª–∞–π–Ω—ã.

        ### –ö–ª—é—á–µ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:
        - **Streamlit:** –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
        - **Pydicom, Nibabel, Pillow:** –ß—Ç–µ–Ω–∏–µ –∏ –ø–∞—Ä—Å–∏–Ω–≥ —Ñ–æ—Ä–º–∞—Ç–æ–≤ DICOM, NIfTI –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
        - **Numpy:** –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ —Å –ø–∏–∫—Å–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
        - **Imageio:** –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö GIF.
        - **PyTorch & Transformers:** –†–∞–±–æ—Ç–∞ ML-–º–æ–¥–µ–ª–∏.
    """)
    st.warning("> ‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –ü—Ä–æ—Ç–æ—Ç–∏–ø –Ω–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∫–ª–∏–Ω–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è.")


def show_preview_page():
    st.title("üî¨ –ü—Ä–µ–≤—å—é –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")

    # --- –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ---
    col1, _ = st.columns([1, 1])

    with col1:
        # --- –≠–¢–ê–ü 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ ---
        st.subheader("–®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∏—Ç–µ ZIP-–∞—Ä—Ö–∏–≤")
        
        uploaded_file = st.file_uploader(
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≤ ZIP-–∞—Ä—Ö–∏–≤–µ",
            type=["zip"],
            on_change=reset_session_state,
            label_visibility="collapsed"
        )

        with st.expander("–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –∞—Ä—Ö–∏–≤–∞"):
            st.markdown("""
            –ê—Ä—Ö–∏–≤ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å **–æ–¥–Ω–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ** –≤ –æ–¥–Ω–æ–º –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤:
            - **–°–µ—Ä–∏—è DICOM:** –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ (—á–∞—Å—Ç–æ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º `.dcm` –∏–ª–∏ –±–µ–∑ –Ω–µ–≥–æ)
            - **–ú–Ω–æ–≥–æ–∫–∞–¥—Ä–æ–≤—ã–π DICOM:** –æ–¥–∏–Ω `.dcm` —Ñ–∞–π–ª, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –≤—Å–µ —Å—Ä–µ–∑—ã
            - **NIfTI:** –æ–¥–∏–Ω —Ñ–∞–π–ª (`.nii` –∏–ª–∏ `.nii.gz`)
            - **–°–µ—Ä–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:** –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ (`.png`, `.jpg`)
            """)

        if not uploaded_file:
            return

        if 'processed_data' not in st.session_state:
            with st.spinner("–ò–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞..."):
                data, error_message = parse_zip_archive(uploaded_file)
                if error_message:
                    st.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∞—Ä—Ö–∏–≤–∞: {error_message}")
                    return
                st.session_state.processed_data = data
                st.rerun()

        # --- –≠–¢–ê–ü 2: –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö ---
        st.subheader("–®–∞–≥ 2: –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å–µ—Ä–∏—é
        series_uid = list(st.session_state.processed_data.keys())[0]
        series_data = st.session_state.processed_data[series_uid]
        meta = series_data["meta"]

        with st.expander("–ß–µ–∫-–ª–∏—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏"):
            validation_results = validate_series(meta)
            all_valid = all(check['status'] for check in validation_results)
            for check in validation_results:
                st.caption(f"{'‚úÖ' if check['status'] else '‚ùå'} {check['check']}: {check['message']}")
            if all_valid: st.success("–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!")
            else: st.warning("–ù–∞–π–¥–µ–Ω—ã –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ—Ç–æ—á–Ω—ã–º–∏.")

        with st.expander("–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ"):
            st.json({k: str(v) for k, v in meta.items()})

        # --- –≠–¢–ê–ü 3: –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∞–Ω–∞–ª–∏–∑ ---
        st.subheader("–®–∞–≥ 3: –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∞–Ω–∞–ª–∏–∑")
        
        viz_container = st.container(border=True)
        with viz_container:
            viz_cols = st.columns([3, 1])
            with viz_cols[0]:
                if meta.get("Modality") == "CT":
                    st.selectbox("–û–∫–Ω–æ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏:", options=list(CT_WINDOWS.keys()), key='window_name_temp', label_visibility="collapsed")
                else:
                    st.session_state.window_name_temp = "Default"
                    st.text_input("–û–∫–Ω–æ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏:", "Default", disabled=True, label_visibility="collapsed")
            
            with viz_cols[1]:
                if st.button("–ü–æ–∫–∞–∑–∞—Ç—å", type="primary", use_container_width=True):
                    st.session_state.show_visualization = True
                    st.session_state.active_window_name = st.session_state.window_name_temp


    # --- –ë–ª–æ–∫ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ (–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏) ---
    if st.session_state.get('show_visualization'):
        active_window = st.session_state.get('active_window_name')
        
        display_frames = prepare_frames_for_display(series_data, active_window, CT_WINDOWS)
        gif_bytes = create_gif(display_frames)
        num_frames = len(display_frames)

        if 'slice_idx' not in st.session_state:
            st.session_state.slice_idx = num_frames // 2

        vis_col1, vis_col2, vis_col3 = st.columns(3)

        with vis_col1:
            st.subheader("–ê–Ω–∏–º–∞—Ü–∏—è")
            st.image(gif_bytes, use_container_width=True)

        with vis_col2:
            st.subheader("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ä–µ–∑–∞")
            st.image(display_frames[st.session_state.slice_idx], use_container_width=True)
            st.slider("–°—Ä–µ–∑", 0, num_frames - 1, key='slice_idx', label_visibility="collapsed")
            st.caption(f"–ü–æ–∫–∞–∑–∞–Ω —Å—Ä–µ–∑: {st.session_state.slice_idx + 1} / {num_frames}")

        with vis_col3:
            st.subheader("–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞—Ç–æ–ª–æ–≥–∏–∏")
            if 'pathology_results' not in st.session_state:
                if st.button("–ù–∞–π—Ç–∏ –ø–∞—Ç–æ–ª–æ–≥–∏–∏", type="primary", use_container_width=True):
                    model = get_model()
                    results = run_pathology_inference(model, series_data["frames"])
                    
                    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –≤ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ ---
                    preds = results.get('preds', [])
                    raw_probs = results.get('raw_probs', [])
                    st.session_state.has_pathology_flag = any(preds)
                    st.session_state.max_prob = max(raw_probs) if raw_probs else 0.0
                    # --- –ö–æ–Ω–µ—Ü –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è ---

                    st.session_state.pathology_results = results
                    st.rerun()
                st.info("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ ML-–∞–Ω–∞–ª–∏–∑–∞.")
            
            else:
                # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–ª–∞–≥–∏ ---
                has_pathology = st.session_state.get('has_pathology_flag', False)
                max_prob = st.session_state.get('max_prob', 0.0)

                if not has_pathology:
                    st.success("–ü–∞—Ç–æ–ª–æ–≥–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", icon="‚úÖ")
                    st.caption(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {max_prob:.4f}")
                else:
                    pathology_indices = [i for i, pred in enumerate(st.session_state.pathology_results['preds']) if pred]
                    st.error(f"–ù–∞–π–¥–µ–Ω–æ –Ω–∞ {len(pathology_indices)} —Å—Ä–µ–∑–∞—Ö:", icon="‚ö†Ô∏è")
                    st.caption(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {max_prob:.4f}")
                    slice_numbers_str = ", ".join([str(i + 1) for i in pathology_indices])
                    st.markdown("**–ù–æ–º–µ—Ä–∞ —Å—Ä–µ–∑–æ–≤:**")
                    st.text_area("–°—Ä–µ–∑—ã —Å –ø–∞—Ç–æ–ª–æ–≥–∏–µ–π", value=slice_numbers_str, height=100, disabled=True)


def show_batch_page():
    st.title("üì¶ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞")

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –≤–∏–¥–∂–µ—Ç–æ–≤
    col1, _ = st.columns([1, 1])

    with col1:
        uploaded_files = st.file_uploader(
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ ZIP-–∞—Ä—Ö–∏–≤–æ–≤",
            type=["zip"],
            accept_multiple_files=True,
            label_visibility="collapsed"
        )

        with st.expander("–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –∞—Ä—Ö–∏–≤–æ–≤"):
            st.markdown("""
            –ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å **–æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ** ZIP-–∞—Ä—Ö–∏–≤–æ–≤. 
            
            –ö–∞–∂–¥—ã–π –∞—Ä—Ö–∏–≤ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å **–æ–¥–Ω–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ** –≤ –æ–¥–Ω–æ–º –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤:
            - **–°–µ—Ä–∏—è DICOM:** –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ (—á–∞—Å—Ç–æ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º `.dcm` –∏–ª–∏ –±–µ–∑ –Ω–µ–≥–æ).
            - **–ú–Ω–æ–≥–æ–∫–∞–¥—Ä–æ–≤—ã–π DICOM:** –æ–¥–∏–Ω `.dcm` —Ñ–∞–π–ª, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –≤—Å–µ —Å—Ä–µ–∑—ã.
            - **NIfTI:** –æ–¥–∏–Ω —Ñ–∞–π–ª (`.nii` –∏–ª–∏ `.nii.gz`).
            - **–°–µ—Ä–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:** –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ (`.png`, `.jpg`).
            """)

        if not uploaded_files:
            return

        # –ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        button_col1, button_col2 = st.columns(2)

        with button_col1:
            if st.button("–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å CSV", type="primary", use_container_width=True):
                csv_data = []
                # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–ø—Ä–æ—â–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ ---
                fieldnames = [
                    'archive_name', 'series_uid', 'source_format', 'modality',
                    'body_part', 'orientation', 'num_frames',
                    'is_valid', 'has_pathology', 'pred_pathology', 
                    'processing_time' # <-- –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∫–æ–ª–æ–Ω–∫—É –≤—Ä–µ–º–µ–Ω–∏
                ]
                
                model = get_model()
                progress_bar = st.progress(0, "–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
                
                for i, file in enumerate(uploaded_files):
                    progress_text = f"–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ {i+1}/{len(uploaded_files)}: {file.name}..."
                    progress_bar.progress(i / len(uploaded_files), text=progress_text)
                    
                    series_data, error_message = parse_zip_archive(file)

                    if not series_data or error_message:
                        csv_data.append({'archive_name': file.name, 'is_valid': False, 'series_uid': error_message or "Parsing error"})
                        continue
                    
                    for series_uid, data in series_data.items():
                        meta = data['meta']
                        validation_checks = validate_series(meta)
                        is_valid = all(check['status'] for check in validation_checks)

                        if is_valid and len(data['frames']) > 0:
                            inference_results = run_pathology_inference(model, data['frames'])
                            has_pathology_flag = inference_results.get('study_has_pathology', False)
                            final_prob = inference_results.get('study_prob_pathology', 0.0)
                            ml_time = inference_results.get('study_processing_time', 0.0)
                        else:
                            has_pathology_flag = False
                            final_prob = 0.0
                            ml_time = 0.0

                        csv_data.append({
                            'archive_name': file.name,
                            'series_uid': series_uid,
                            'source_format': meta.get('SourceFormat', 'N/A'),
                            'modality': meta.get('Modality', 'N/A'),
                            'body_part': meta.get('BodyPartExamined', 'N/A'),
                            'orientation': meta.get('orientation', 'N/A'),
                            'num_frames': meta.get('num_frames', 'N/A'),
                            'is_valid': is_valid,
                            'has_pathology': has_pathology_flag,
                            'pred_pathology': f"{final_prob:.4f}",
                            'ml_processing_time': f"{ml_time:.2f}s"
                        })
                
                progress_bar.progress(1.0, text="–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                st.session_state.result_df = pd.DataFrame(csv_data, columns=fieldnames).fillna("N/A")
                st.rerun()

        if 'result_df' in st.session_state:
            with button_col2:
                csv_string = st.session_state.result_df.to_csv(index=False).encode('utf-8')
                st.download_button(
                    "–°–∫–∞—á–∞—Ç—å CSV",
                    csv_string,
                    file_name="batch_report.csv",
                    mime="text/csv",
                    use_container_width=True
                )

    if 'result_df' in st.session_state:
        st.divider()
        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        st.dataframe(st.session_state.result_df)


def show_api_page():
    st.title("ü§ñ API-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
    st.info("–î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É `http://localhost:8502`.")

    st.markdown("""
    –°–µ—Ä–≤–∏—Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç REST API –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π.
    –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å `medscreen` –≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞–π–ø–ª–∞–π–Ω—ã.
    """)

    st.subheader("–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
    st.markdown("""
    –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ ZIP-–∞—Ä—Ö–∏–≤–æ–≤ –Ω–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç `/api/v1/upload`. 
    –°–µ—Ä–≤–∏—Å –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –∏—Ö –∏ –≤–µ—Ä–Ω–µ—Ç **CSV-—Ñ–∞–π–ª** —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏, –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π —Ç–æ–º—É, —á—Ç–æ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ "–ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞".
    """)
    
    st.code("""
# –ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–≤—É—Ö –∞—Ä—Ö–∏–≤–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ report.csv
curl -X POST "http://localhost:8502/api/v1/upload" \\
     -H "Content-Type: multipart/form-data" \\
     -F "files=@/–ø—É—Ç—å/–∫/–≤–∞—à–µ–º—É/study1.zip" \\
     -F "files=@/–ø—É—Ç—å/–∫/–≤–∞—à–µ–º—É/study2.zip" \\
     --output report.csv
    """, language="bash")

    st.subheader("–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")
    st.markdown("–ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API (Swagger) —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É [http://localhost:8502/docs](http://localhost:8502/docs).")
