import streamlit as st
import pandas as pd
<<<<<<< HEAD
from utils import (
    process_uploaded_file, validate_series, 
    run_pathology_inference, model, create_gif_from_frames, 
    precompute_uint8_frames
)
=======
from file_io import parse_zip_archive
from data_validation import validate_series
from visualization import prepare_frames_for_display, create_gif
from ml_processing import get_model, run_pathology_inference
>>>>>>> 80cab49 (Refactoring)

# –û–∫–Ω–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ö–¢ (Center, Width)
CT_WINDOWS = {
    "–õ–µ–≥–æ—á–Ω–æ–µ (Lung)": (-600, 1500),
    "–ú—è–≥–∫–æ—Ç–∫–∞–Ω–Ω–æ–µ (Soft Tissue)": (40, 400),
<<<<<<< HEAD
    "–ö–æ—Å—Ç–Ω–æ–µ (Bone)": (400, 1800),
=======
    "–ö–æ—Å—Ç–Ω–æ–µ (Bone)": (700, 1500),
>>>>>>> 80cab49 (Refactoring)
}

def reset_session_state():
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞."""
    st.session_state.clear()

<<<<<<< HEAD
def show_preview_page():
    st.title("üî¨ –ü—Ä–µ–≤—å—é –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")

    # –°–æ–∑–¥–∞–µ–º –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –¥–ª—è –±—É–¥—É—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    col1, col2 = st.columns([1, 1])

    with col1:
        # --- –≠–¢–ê–ü 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ ---
        st.subheader("–®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª")
        uploaded_file = st.file_uploader(
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è (.zip, .dcm, .nii, .nii.gz)",
            type=["zip", "dcm", "nii", "gz"],
=======

def show_about_page():
    st.title("‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")
    st.markdown("""
        **MedScreen** ‚Äî —ç—Ç–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–º–µ–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç—ã:
        
        - **–ü—Ä–µ–≤—å—é –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:** –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è. –ü–æ–∑–≤–æ–ª—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ –∏–∑—É—á–∏—Ç—å —Å—Ä–µ–∑—ã, –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ML-–º–æ–¥–µ–ª–∏.
        - **–ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞:** –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞—Ä—Ö–∏–≤–æ–≤ —Å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º–∏ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–≥–æ CSV-–æ—Ç—á–µ—Ç–∞.
        - **API-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:** –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ç–æ–≥–æ, –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å –≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞–π–ø–ª–∞–π–Ω—ã.

        ### –ö–ª—é—á–µ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:
        - **Streamlit:** –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
        - **Pydicom, Nibabel, Pillow:** –ß—Ç–µ–Ω–∏–µ –∏ –ø–∞—Ä—Å–∏–Ω–≥ —Ñ–æ—Ä–º–∞—Ç–æ–≤ DICOM, NIfTI –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
        - **Numpy:** –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ —Å –ø–∏–∫—Å–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
        - **Imageio:** –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö GIF.
        - **PyTorch & Transformers:** –†–∞–±–æ—Ç–∞ ML-–º–æ–¥–µ–ª–∏.
    """)
    st.warning("> ‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –ü—Ä–æ—Ç–æ—Ç–∏–ø –Ω–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∫–ª–∏–Ω–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è.")


def show_preview_page():
    st.title("üî¨ –ü—Ä–µ–≤—å—é –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")

    # --- –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ---
    col1, _ = st.columns([1, 1])

    with col1:
        # --- –≠–¢–ê–ü 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ ---
        st.subheader("–®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∏—Ç–µ ZIP-–∞—Ä—Ö–∏–≤")
        
        uploaded_file = st.file_uploader(
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≤ ZIP-–∞—Ä—Ö–∏–≤–µ",
            type=["zip"],
>>>>>>> 80cab49 (Refactoring)
            on_change=reset_session_state,
            label_visibility="collapsed"
        )

<<<<<<< HEAD
        if not uploaded_file:
            return

        # --- –≠–¢–ê–ü 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
        st.subheader("–®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –¥–∞–Ω–Ω—ã–µ")
        if 'processed_data' not in st.session_state:
            if st.button("–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª", type="primary"):
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º st.status –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                with st.status("–ò–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞...", expanded=True) as status:
                    data = process_uploaded_file(uploaded_file, status)
                    if data:
                        st.session_state.processed_data = data
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ expander
                        st.session_state.processing_status = "complete"
                        status.update(label="–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", state="complete", expanded=False)
                    else:
                        st.session_state.processing_status = "error"
                        status.update(label="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏!", state="error", expanded=True)
                st.rerun()
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–µ—Ä–Ω—É—Ç—ã–π –ª–æ–≥ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if st.session_state.get("processing_status") == "complete":
            with st.expander("–õ–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏", expanded=False):
                st.success("–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        elif st.session_state.get("processing_status") == "error":
            with st.expander("–õ–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏", expanded=True):
                st.error("–í –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


        # --- –≠–¢–ê–ü 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è ---
        st.subheader("–®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑")
        
        series_uids = list(st.session_state.processed_data.keys())
        selected_uid = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", series_uids, key='series_uid',
            format_func=lambda uid: f"–°–µ—Ä–∏—è ...{uid[-12:]}"
        ) if len(series_uids) > 1 else series_uids[0]
        if not selected_uid: selected_uid = series_uids[0]
        
        series = st.session_state.processed_data[selected_uid]
        meta = series["meta"]

        # –ß–µ–∫-–ª–∏—Å—Ç –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ —Å–∫—Ä—ã—Ç—ã—Ö –±–ª–æ–∫–∞—Ö
        with st.expander("–ß–µ–∫-–ª–∏—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏"):
            validation_results = validate_series(meta)
            validation_results[3]['status'] = len(series_uids) == 1
            all_valid = all(check['status'] for check in validation_results)
            for check in validation_results:
                st.caption(f"{'‚úÖ' if check['status'] else '‚ùå'} {check['text']}")
            if all_valid: st.success("–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!") 
            else: st.warning("–ù–∞–π–¥–µ–Ω—ã –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è.")

        with st.expander("–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ"):
            st.json(meta)

        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π
        if meta.get("Modality") == "CT":
            st.subheader("–û–∫–Ω–æ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
            with st.container(border=True):
                viz_cols = st.columns([3, 1])
                with viz_cols[0]:
                    st.selectbox("–û–∫–Ω–æ:", options=list(CT_WINDOWS.keys()), key='window_selection_temp', label_visibility="collapsed")
                with viz_cols[1]:
                    if st.button("–ü–æ–∫–∞–∑–∞—Ç—å", type="primary", use_container_width=True):
                        st.session_state.show_visualization = True
                        st.session_state.active_window_name = st.session_state.window_selection_temp
        else:
            if 'show_visualization' not in st.session_state:
                st.session_state.show_visualization = True
                st.session_state.active_window_name = "NIfTI"

    # –ë–ª–æ–∫ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ (–≤–Ω–µ –∫–æ–ª–æ–Ω–æ–∫, —á—Ç–æ–±—ã –±—ã–ª –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É)
    if st.session_state.get('show_visualization'):
        num_frames = meta['num_frames']
        if 'slice_idx' not in st.session_state: st.session_state.slice_idx = 0
        active_window = st.session_state.get('active_window_name', list(CT_WINDOWS.keys())[0])

        uint8_frames = precompute_uint8_frames(selected_uid, active_window, CT_WINDOWS)
        gif_bytes = create_gif_from_frames(selected_uid, active_window, CT_WINDOWS)

        vis_col1, vis_col2, vis_col3 = st.columns(3)
        with vis_col1:
            st.subheader("–ê–Ω–∏–º–∞—Ü–∏—è")
            st.image(gif_bytes, use_container_width=True)
        with vis_col2:
            st.subheader("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ä–µ–∑–∞")
            st.image(uint8_frames[st.session_state.slice_idx], use_container_width=True)
            st.slider("–°—Ä–µ–∑", 0, num_frames - 1, key='slice_idx', label_visibility="collapsed")
            st.caption(f"–ü–æ–∫–∞–∑–∞–Ω: {st.session_state.slice_idx + 1}/{num_frames}")
        with vis_col3:
            st.subheader("–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞—Ç–æ–ª–æ–≥–∏–∏")
            if 'pathology_indices' not in st.session_state:
                if st.button("–ù–∞–π—Ç–∏ –ø–∞—Ç–æ–ª–æ–≥–∏–∏", use_container_width=True):
                    predictions = run_pathology_inference(model, series["frames"])
=======
        with st.expander("–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –∞—Ä—Ö–∏–≤–∞"):
            st.markdown("""
            –ê—Ä—Ö–∏–≤ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å **–æ–¥–Ω–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ** –≤ –æ–¥–Ω–æ–º –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤:
            - **–°–µ—Ä–∏—è DICOM:** –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ (—á–∞—Å—Ç–æ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º `.dcm` –∏–ª–∏ –±–µ–∑ –Ω–µ–≥–æ)
            - **–ú–Ω–æ–≥–æ–∫–∞–¥—Ä–æ–≤—ã–π DICOM:** –æ–¥–∏–Ω `.dcm` —Ñ–∞–π–ª, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –≤—Å–µ —Å—Ä–µ–∑—ã
            - **NIfTI:** –æ–¥–∏–Ω —Ñ–∞–π–ª (`.nii` –∏–ª–∏ `.nii.gz`)
            - **–°–µ—Ä–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:** –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ (`.png`, `.jpg`)
            """)

        if not uploaded_file:
            return

        if 'processed_data' not in st.session_state:
            with st.spinner("–ò–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞..."):
                data, error_message = parse_zip_archive(uploaded_file)
                if error_message:
                    st.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∞—Ä—Ö–∏–≤–∞: {error_message}")
                    return
                st.session_state.processed_data = data
                st.rerun()

        # --- –≠–¢–ê–ü 2: –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö ---
        st.subheader("–®–∞–≥ 2: –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å–µ—Ä–∏—é
        series_uid = list(st.session_state.processed_data.keys())[0]
        series_data = st.session_state.processed_data[series_uid]
        meta = series_data["meta"]

        with st.expander("–ß–µ–∫-–ª–∏—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏"):
            validation_results = validate_series(meta)
            all_valid = all(check['status'] for check in validation_results)
            for check in validation_results:
                st.caption(f"{'‚úÖ' if check['status'] else '‚ùå'} {check['check']}: {check['message']}")
            if all_valid: st.success("–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!")
            else: st.warning("–ù–∞–π–¥–µ–Ω—ã –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ—Ç–æ—á–Ω—ã–º–∏.")

        with st.expander("–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ"):
            st.json({k: str(v) for k, v in meta.items()})

        # --- –≠–¢–ê–ü 3: –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∞–Ω–∞–ª–∏–∑ ---
        st.subheader("–®–∞–≥ 3: –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∞–Ω–∞–ª–∏–∑")
        
        viz_container = st.container(border=True)
        with viz_container:
            viz_cols = st.columns([3, 1])
            with viz_cols[0]:
                if meta.get("Modality") == "CT":
                    st.selectbox("–û–∫–Ω–æ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏:", options=list(CT_WINDOWS.keys()), key='window_name_temp', label_visibility="collapsed")
                else:
                    st.session_state.window_name_temp = "Default"
                    st.text_input("–û–∫–Ω–æ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏:", "Default", disabled=True, label_visibility="collapsed")
            
            with viz_cols[1]:
                if st.button("–ü–æ–∫–∞–∑–∞—Ç—å", type="primary", use_container_width=True):
                    st.session_state.show_visualization = True
                    st.session_state.active_window_name = st.session_state.window_name_temp


    # --- –ë–ª–æ–∫ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ (–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏) ---
    if st.session_state.get('show_visualization'):
        active_window = st.session_state.get('active_window_name')
        
        display_frames = prepare_frames_for_display(series_data, active_window, CT_WINDOWS)
        gif_bytes = create_gif(display_frames)
        num_frames = len(display_frames)

        if 'slice_idx' not in st.session_state:
            st.session_state.slice_idx = num_frames // 2

        vis_col1, vis_col2, vis_col3 = st.columns(3)

        with vis_col1:
            st.subheader("–ê–Ω–∏–º–∞—Ü–∏—è")
            st.image(gif_bytes, use_container_width=True)

        with vis_col2:
            st.subheader("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ä–µ–∑–∞")
            st.image(display_frames[st.session_state.slice_idx], use_container_width=True)
            st.slider("–°—Ä–µ–∑", 0, num_frames - 1, key='slice_idx', label_visibility="collapsed")
            st.caption(f"–ü–æ–∫–∞–∑–∞–Ω —Å—Ä–µ–∑: {st.session_state.slice_idx + 1} / {num_frames}")

        with vis_col3:
            st.subheader("–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞—Ç–æ–ª–æ–≥–∏–∏")
            if 'pathology_indices' not in st.session_state:
                if st.button("–ù–∞–π—Ç–∏ –ø–∞—Ç–æ–ª–æ–≥–∏–∏", type="primary", use_container_width=True):
                    model = get_model()
                    predictions = run_pathology_inference(model, series_data["frames"])
>>>>>>> 80cab49 (Refactoring)
                    st.session_state.pathology_indices = [i for i, pred in enumerate(predictions) if pred]
                    st.rerun()
                st.info("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ ML-–∞–Ω–∞–ª–∏–∑–∞.")
            elif not st.session_state.pathology_indices:
                st.success("–ü–∞—Ç–æ–ª–æ–≥–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", icon="‚úÖ")
            else:
                pathology_indices = st.session_state.pathology_indices
                st.error(f"–ù–∞–π–¥–µ–Ω–æ –Ω–∞ {len(pathology_indices)} —Å—Ä–µ–∑–∞—Ö:", icon="‚ö†Ô∏è")
                slice_numbers_str = ", ".join([str(i + 1) for i in pathology_indices])
                st.markdown("**–ù–æ–º–µ—Ä–∞ —Å—Ä–µ–∑–æ–≤:**")
<<<<<<< HEAD
                st.text(slice_numbers_str)
=======
                st.text_area("–°—Ä–µ–∑—ã —Å –ø–∞—Ç–æ–ª–æ–≥–∏–µ–π", value=slice_numbers_str, height=100, disabled=True)

>>>>>>> 80cab49 (Refactoring)

def show_batch_page():
    st.title("üì¶ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞")

<<<<<<< HEAD
    # –°–æ–∑–¥–∞–µ–º –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏, —á—Ç–æ–±—ã –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å —à–∏—Ä–∏–Ω—É –≤–∏–¥–∂–µ—Ç–æ–≤
    col1, col2 = st.columns([1, 1])

    with col1:
        uploaded_files = st.file_uploader(
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã (.zip, .dcm, .nii, .nii.gz)",
            type=["zip", "dcm", "nii", "gz"], accept_multiple_files=True,
            label_visibility="collapsed"
        )

        if not uploaded_files: return

        # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
=======
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –≤–∏–¥–∂–µ—Ç–æ–≤
    col1, _ = st.columns([1, 1])

    with col1:
        uploaded_files = st.file_uploader(
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ ZIP-–∞—Ä—Ö–∏–≤–æ–≤",
            type=["zip"],
            accept_multiple_files=True,
            label_visibility="collapsed"
        )

        with st.expander("–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –∞—Ä—Ö–∏–≤–æ–≤"):
            st.markdown("""
            –ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å **–æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ** ZIP-–∞—Ä—Ö–∏–≤–æ–≤. 
            
            –ö–∞–∂–¥—ã–π –∞—Ä—Ö–∏–≤ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å **–æ–¥–Ω–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ** –≤ –æ–¥–Ω–æ–º –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤:
            - **–°–µ—Ä–∏—è DICOM:** –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ (—á–∞—Å—Ç–æ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º `.dcm` –∏–ª–∏ –±–µ–∑ –Ω–µ–≥–æ).
            - **–ú–Ω–æ–≥–æ–∫–∞–¥—Ä–æ–≤—ã–π DICOM:** –æ–¥–∏–Ω `.dcm` —Ñ–∞–π–ª, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –≤—Å–µ —Å—Ä–µ–∑—ã.
            - **NIfTI:** –æ–¥–∏–Ω —Ñ–∞–π–ª (`.nii` –∏–ª–∏ `.nii.gz`).
            - **–°–µ—Ä–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:** –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ (`.png`, `.jpg`).
            """)

        if not uploaded_files:
            return

        # –ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
>>>>>>> 80cab49 (Refactoring)
        button_col1, button_col2 = st.columns(2)

        with button_col1:
            if st.button("–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å CSV", type="primary", use_container_width=True):
                csv_data = []
                fieldnames = [
<<<<<<< HEAD
                    'archive_name', 'series_uid', 'source_format', 'modality', 
                    'is_valid', 'orientation', 'missing_slices', 'num_frames',
                    'has_pathology', 'pathology_slice_count'
                ]
                
                progress_bar = st.progress(0, "–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
                for i, file in enumerate(uploaded_files):
                    progress_text = f"–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ {i+1}/{len(uploaded_files)}: {file.name}..."
                    progress_bar.progress((i) / len(uploaded_files), text=progress_text)
                    
                    class DummyStatus:
                        def write(self, *args, **kwargs): pass
                    
                    dummy_status = DummyStatus()
                    
                    from utils import _process_dicom_zip, _process_multiframe_dicom, _process_nifti_file
                    filename = file.name.lower()
                    series_data = {}
                    if filename.endswith(".zip"): series_data = _process_dicom_zip(file, dummy_status)
                    elif filename.endswith(".dcm"): series_data = _process_multiframe_dicom(file, dummy_status)
                    else: series_data = _process_nifti_file(file, dummy_status)

                    if not series_data:
                        csv_data.append({'archive_name': file.name, 'is_valid': False})
=======
                    'archive_name', 'series_uid', 'source_format', 'modality',
                    'is_valid', 'body_part', 'orientation', 'num_frames',
                    'has_pathology', 'pathology_slice_count'
                ]
                
                model = get_model()
                progress_bar = st.progress(0, "–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
                
                for i, file in enumerate(uploaded_files):
                    progress_text = f"–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ {i+1}/{len(uploaded_files)}: {file.name}..."
                    progress_bar.progress(i / len(uploaded_files), text=progress_text)
                    
                    series_data, error_message = parse_zip_archive(file)

                    if not series_data or error_message:
                        csv_data.append({'archive_name': file.name, 'is_valid': False, 'series_uid': error_message or "Parsing error"})
>>>>>>> 80cab49 (Refactoring)
                        continue
                    
                    for series_uid, data in series_data.items():
                        meta = data['meta']
                        validation_checks = validate_series(meta)
<<<<<<< HEAD
                        validation_checks[3]['status'] = len(series_data) == 1
=======
>>>>>>> 80cab49 (Refactoring)
                        is_valid = all(check['status'] for check in validation_checks)

                        predictions = run_pathology_inference(model, data['frames'])
                        pathology_count = sum(predictions)

                        csv_data.append({
<<<<<<< HEAD
                            'archive_name': file.name, 'series_uid': series_uid,
                            'source_format': meta.get('SourceFormat', 'N/A'),
                            'modality': meta.get('Modality', 'N/A'),
                            'is_valid': is_valid,
                            'orientation': meta.get('orientation', 'N/A'),
                            'missing_slices': meta.get('missing_slices', 'N/A'),
=======
                            'archive_name': file.name,
                            'series_uid': series_uid,
                            'source_format': meta.get('SourceFormat', 'N/A'),
                            'modality': meta.get('Modality', 'N/A'),
                            'is_valid': is_valid,
                            'body_part': meta.get('BodyPartExamined', 'N/A'),
                            'orientation': meta.get('orientation', 'N/A'),
>>>>>>> 80cab49 (Refactoring)
                            'num_frames': meta.get('num_frames', 'N/A'),
                            'has_pathology': pathology_count > 0,
                            'pathology_slice_count': pathology_count
                        })
                
                progress_bar.progress(1.0, text="–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                st.session_state.result_df = pd.DataFrame(csv_data, columns=fieldnames).fillna("N/A")
                st.rerun()

<<<<<<< HEAD
        # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤–æ –≤—Ç–æ—Ä–æ–π –∫–æ–ª–æ–Ω–∫–µ, –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if 'result_df' in st.session_state:
            with button_col2:
                csv_string = st.session_state.result_df.to_csv(index=False).encode('utf-8')
                st.download_button("–°–∫–∞—á–∞—Ç—å CSV", csv_string, file_name="batch_report.csv", mime="text/csv", use_container_width=True)

    # –¢–∞–±–ª–∏—Ü–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø–æ–¥ –∫–æ–ª–æ–Ω–∫–∞–º–∏ –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É
=======
        if 'result_df' in st.session_state:
            with button_col2:
                csv_string = st.session_state.result_df.to_csv(index=False).encode('utf-8')
                st.download_button(
                    "–°–∫–∞—á–∞—Ç—å CSV",
                    csv_string,
                    file_name="batch_report.csv",
                    mime="text/csv",
                    use_container_width=True
                )

>>>>>>> 80cab49 (Refactoring)
    if 'result_df' in st.session_state:
        st.divider()
        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        st.dataframe(st.session_state.result_df)

<<<<<<< HEAD
def show_about_page():
    st.title("‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")
    st.markdown("""
        **MedScreen** ‚Äî —ç—Ç–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
        
        ### –ö–ª—é—á–µ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:
        - **Streamlit:** –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
        - **Pydicom, Nibabel:** –ß—Ç–µ–Ω–∏–µ –∏ –ø–∞—Ä—Å–∏–Ω–≥ DICOM –∏ NIfTI —Ñ–∞–π–ª–æ–≤.
        - **Numpy:** –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ —Å –ø–∏–∫—Å–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
        - **Pandas:** –†–∞–±–æ—Ç–∞ —Å —Ç–∞–±–ª–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è CSV.
        - **Imageio:** –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö GIF.
    """)
    st.warning("> ‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –ü—Ä–æ—Ç–æ—Ç–∏–ø –Ω–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∫–ª–∏–Ω–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è.")
=======

def show_api_page():
    st.title("ü§ñ API-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å [–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ]")
    st.info("–≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚Äî –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è API. –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `localhost:8000`.")

    st.markdown("""
    –°–µ—Ä–≤–∏—Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç REST API –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π.
    –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–≥–ª—è–¥–∏—Ç —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:
    """)

    st.subheader("–ó–∞–≥—Ä—É–∑–∫–∞ –∞—Ä—Ö–∏–≤–∞ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É")
    st.markdown("–û—Ç–ø—Ä–∞–≤–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞ —Å ZIP-–∞—Ä—Ö–∏–≤–æ–º. –°–µ—Ä–≤–∏—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –µ–≥–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.")
    st.code("""
# curl -X POST "http://localhost:8000/api/v1/upload" \\
#      -H "Content-Type: multipart/form-data" \\
#      -F "file=@/path/to/your/study.zip"
    """, language="bash")

    st.markdown("–ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É [http://localhost:8000/docs](http://localhost:8000/docs).")
>>>>>>> 80cab49 (Refactoring)
